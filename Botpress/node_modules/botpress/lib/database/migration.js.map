{"version":3,"sources":["../../src/database/migration.js"],"names":["getMigrationDirIfExist","dirList","root","migrationPath","path","resolve","runUp","knex","dir","dirFiles","filter","test","file","sort","index","length","migration","require","up","module","exports","db","moduleDefinitions","migrationsDirList","reduce","get","Promise","all","map","down"],"mappings":";;AAMA;;;;AACA;;;;2cAPA;;;;;;AASA,MAAMA,yBAAyB,CAACC,OAAD,EAAU,EAAEC,IAAF,EAAV,KAAuB;AACpD,QAAMC,gBAAgBC,eAAKC,OAAL,CAAaH,IAAb,EAAmB,cAAnB,CAAtB;;AAEA,SAAO,oBAAWC,aAAX,IAA4B,CAAC,GAAGF,OAAJ,EAAaE,aAAb,CAA5B,GAA0DF,OAAjE;AACD,CAJD;;AAMA,MAAMK;AAAA,+BAAQ,WAAOC,IAAP,EAAaC,GAAb,EAAqB;AACjC,UAAMC,WAAW,qBAAYD,GAAZ,EACdE,MADc,CACP;AAAA,aAAQ,iBAAgBC,IAAhB,CAAqBC,IAArB;AAAR;AAAA,KADO,EAEdC,IAFc,EAAjB;;AAIA,SAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQL,SAASM,MAArC,EAA6CD,OAA7C,EAAsD;AACpD,YAAME,YAAYC,QAAQb,eAAKC,OAAL,CAAaG,GAAb,EAAkBC,SAASK,KAAT,CAAlB,CAAR,CAAlB;;AAEAE,gBAAUE,EAAV,KAAiB,MAAMF,UAAUE,EAAV,CAAaX,IAAb,CAAvB;AACD;AACF,GAVK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAYAY,OAAOC,OAAP;AAAA,gCAAiB,WAAOC,EAAP,EAAWC,oBAAoB,EAA/B,EAAsC;AACrD,UAAMC,oBAAoBD,kBAAkBE,MAAlB,CAAyBxB,sBAAzB,EAAiD,EAAjD,CAA1B;AACA,UAAMO,OAAO,MAAMc,GAAGI,GAAH,EAAnB;;AAEA,WAAO;AACLP,UAAI;AAAA,eAAMQ,QAAQC,GAAR,CAAYJ,kBAAkBK,GAAlB,CAAsB;AAAA,iBAAOtB,MAAMC,IAAN,EAAYC,GAAZ,CAAP;AAAA,SAAtB,CAAZ,CAAN;AAAA,OADC;AAEL;;;;AAIAqB,YAAM;AAAA,eAAO,EAAP;AAAA,OAND,CAMY;AANZ,KAAP;AAQD,GAZD;;AAAA;AAAA;AAAA;AAAA","file":"migration.js","sourcesContent":["/*\n  It's module for run migration for every module which has dir \"/migrations\"\n  in module root folder. Every files in dir must be\n  [timestamp_miliseconds]__[name].js (example: 1538478025618__hitl_messages.js)\n*/\n\nimport path from 'path'\nimport { existsSync, readdirSync } from 'fs'\n\nconst getMigrationDirIfExist = (dirList, { root }) => {\n  const migrationPath = path.resolve(root, './migrations')\n\n  return existsSync(migrationPath) ? [...dirList, migrationPath] : dirList\n}\n\nconst runUp = async (knex, dir) => {\n  const dirFiles = readdirSync(dir)\n    .filter(file => /^\\d+__.+\\.js$/.test(file))\n    .sort()\n\n  for (let index = 0; index < dirFiles.length; index++) {\n    const migration = require(path.resolve(dir, dirFiles[index]))\n\n    migration.up && (await migration.up(knex))\n  }\n}\n\nmodule.exports = async (db, moduleDefinitions = []) => {\n  const migrationsDirList = moduleDefinitions.reduce(getMigrationDirIfExist, [])\n  const knex = await db.get()\n\n  return {\n    up: () => Promise.all(migrationsDirList.map(dir => runUp(knex, dir))),\n    /*\n      TODO: write it only with changes in \"botpress CL\"\n      maybe it will be make this command: botpress migrate:[up||down] [module_name]\n    */\n    down: () => ({}) // TODO: write it only with changes in \"botpress CL\"\n  }\n}\n"]}