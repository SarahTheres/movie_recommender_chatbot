{"version":3,"sources":["../../src/cli/ghost-sync.js"],"names":["Promise","promisifyAll","fs","writeRevisions","revisionsFile","revisions","user","host","os","hostname","fullUser","filter","Boolean","join","preamble","Date","toISOString","fromCallback","cb","writeFile","folderPath","file","content","deleted","filePath","path","writeFileAsync","unlinkAsync","e","code","resolve","updateFolder","projectLocation","files","binary","folder","REVISIONS_FILE_NAME","forEach","data","Buffer","from","each","module","exports","botUrl","replace","print","info","token","warn","config","axios","get","headers","authorization","err","error","message","Object","keys","length","confirm","Confirm","run","props","success"],"mappings":"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","file":"ghost-sync.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport os from 'os'\nimport Promise from 'bluebird'\nimport axios from 'axios'\nimport Confirm from 'prompt-confirm'\nimport username from 'username'\nimport prependFile from 'prepend-file'\nimport mapValues from 'lodash/mapValues'\n\nimport { print } from '../util'\nimport { REVISIONS_FILE_NAME } from '../ghost-content'\n\nimport { login } from './auth'\n\nPromise.promisifyAll(fs)\n\nconst writeRevisions = async (revisionsFile, revisions) => {\n  const user = await username()\n  const host = os.hostname()\n  let fullUser = [user, host].filter(Boolean).join('@')\n  if (fullUser) {\n    fullUser = ' by ' + fullUser\n  }\n  const preamble = `# Synced ${new Date().toISOString()}${fullUser}`\n\n  return Promise.fromCallback(cb => {\n    prependFile(revisionsFile, [preamble, ...revisions, ''].join('\\n'), cb)\n  })\n}\n\nconst writeFile = folderPath => async ({ file, content, deleted }) => {\n  const filePath = path.join(folderPath, file)\n\n  if (!deleted) {\n    return fs.writeFileAsync(filePath, content)\n  }\n\n  try {\n    return await fs.unlinkAsync(filePath)\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return Promise.resolve(true)\n    }\n    throw e\n  }\n}\n\nconst updateFolder = projectLocation => async ({ files, revisions, binary }, folder) => {\n  const folderPath = path.join(projectLocation, folder)\n  const revisionsFile = path.join(folderPath, REVISIONS_FILE_NAME)\n  await writeRevisions(revisionsFile, revisions)\n\n  if (binary) {\n    files.forEach(data => {\n      data.content = Buffer.from(data.content, 'base64')\n    })\n  }\n\n  return Promise.each(files, writeFile(folderPath))\n}\n\nmodule.exports = async botUrl => {\n  botUrl = botUrl.replace(/\\/+$/, '')\n\n  // This also implicitly ensures we're inside of the bot project directory, and validates the bot URL\n  print.info(`Checking your login status with ${botUrl}...`)\n  const token = await login(botUrl)\n  if (!token) {\n    print.warn('Login is required for this operation, exiting now.')\n    return\n  }\n\n  let config\n  try {\n    const { data } = await axios.get(`${botUrl}/api/ghost_content/export`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    })\n    config = data\n  } catch (err) {\n    print.error(err.message || 'Unknown error', 'while fetching ghost content.')\n    return\n  }\n\n  if (!config || !Object.keys(config).length) {\n    print.info('No pending ghost revisions, nothing to be done here.')\n    return\n  }\n\n  const confirm = await new Confirm(`\n  Running this command will override any untracked / uncommitted changes to the corresponding content files.\n  It is recommended that you use version control system (like git) and commit any changes before proceeding.\n  Are you sure you want to continue?\n  `).run()\n\n  if (!confirm) {\n    return\n  }\n\n  try {\n    await Promise.props(mapValues(config, updateFolder(path.resolve('.'))))\n    print.success(`\n    All content synced successfully. You now need to redeploy your bot with the updated content to finish the sync procedure.\n    If you're using version control system (like git) you should review the changes before committing.\n    Please don't forget to include (commit, deploy) ${REVISIONS_FILE_NAME} file(s).\n    `)\n  } catch (err) {\n    print.error(err.message || 'Unknown error', 'while applying ghost content.')\n    print.error('Your content files may be in inconsistent state.')\n    print.error('It is recommended to reset the changes (like git reset) and try again.')\n  }\n}\n"]}