{"version":3,"sources":["webpack:///webpack/bootstrap 48e4ad84d6d51a19c87a","webpack:///external \"lodash\"","webpack:///./src/providers/nlu.js","webpack:///external \"bluebird\"","webpack:///./src/index.js","webpack:///external \"mkdirp\"","webpack:///external \"path\"","webpack:///external \"nanoid/generate\"","webpack:///./src/providers/qnaMaker.js","webpack:///external \"axios\"","webpack:///external \"ms\"","webpack:///./src/middleware.js","webpack:///./src/parsers.js","webpack:///external \"lodash/get\"","webpack:///external \"csv-parse/lib/sync\"","webpack:///external \"multer\"","webpack:///external \"json2csv\"","webpack:///external \"yn\"","webpack:///external \"moment\"","webpack:///external \"iconv-lite\"","webpack:///external \"nanoid\""],"names":["safeId","length","slugify","s","toLowerCase","replace","getQuestionId","questions","substring","NLU_PREFIX","getIntentId","id","normalizeQuestions","map","q","trim","filter","Boolean","Storage","bp","config","ghost","ghostManager","projectDir","projectLocation","qnaDir","mkdirp","sync","path","resolve","addRootFolder","filesGlob","nlu","provider","checkSyncNeeded","data","enabled","storage","saveIntent","entities","utterances","deleteIntent","syncNlu","upsertFile","JSON","stringify","qna","statusCb","Promise","each","_","isArray","i","ids","opts","filename","readFile","parse","directoryListing","limit","offset","slice","getQuestion","question","qnaId","all","deleteFile","text","extract","intents","chain","intent","uniqBy","name","startsWith","orderBy","value","confidence","answer","metadata","parsers","logger","shouldProcessMessage","csvUploadStatuses","recordCsvUploadStatus","csvUploadStatusId","status","module","exports","type","required","default","env","textRenderer","exportCsvEncoding","qnaMakerApiKey","qnaMakerKnowledgebase","qnaCategories","init","configurator","loadAll","isMicrosoftMakerUsed","MicrosoftQnaMakerStorage","NluStorage","initialize","middlewares","register","handler","event","next","dialogEngine","stateManager","getState","sessionId","user","state","shouldSkip","order","description","ready","categories","split","import","format","omit","item","existingQuestions","parsedQuestions","hasCategory","questionsToSave","includes","processedCount","insert","export","flat","qnas","flatMap","textAnswer","action","redirectNode","redirectFlow","category","answer2","categoryWrapper","fn","bind","answersOn","router","getRouter","getFieldFromMetadata","field","find","filterByCategoryAndQuestion","fetchQuestions","allQuestions","filteredQuestions","isRightId","join","indexOf","reverse","getQuestions","items","count","parseInt","undefined","tmpQuestions","get","res","query","send","error","stack","message","post","req","events","emit","time","body","params","put","update","delete","questionsData","setHeader","parseOptions","fields","header","json2csvParser","Json2csvParser","iconv","encode","end","upload","single","isReplace","decode","file","buffer","markUpperCase","str","restoreUpperCase","c","toUpperCase","keysToRestore","redirectflow","redirectnode","qnaItemData","fromPairs","prepareMeta","pick","toPairs","isString","isUndefined","publish","client","knowledgebase","patchKb","patch","waitForOperationToFinish","operationId","delay","timeout","headers","info","operationState","errorResponse","invalidateCache","baseURL","Object","assign","axios","create","knowledgebaseName","isBpKnowledgbase","initialKnowledgebases","knowledgebases","existingKb","endpointKey","primaryEndpointKey","prevData","questionsChanged","isEqual","questionsToAdd","difference","questionsToDelete","qnaList","add","qnaDocuments","doc","metadataFilters","top","strictFilters","hostName","Authorization","resp","answers","score","maxQuestionsToDeletePerRequest","chunk","idsChunk","Math","min","processEvent","pop","debug","reply","stateId","jumpTo","parseFlow","jsonParse","jsonContent","options","instruction","Error","redirectInstruction","flowParams","csvParse","csvContent","mergeRows","acc","prevRow","isSameAnswer","rows","columns","reduce","splice"],"mappings":"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","file":"node.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/home/epaminond/private/projects/2015.08.08_keenethics/projects/botpress/botpress/packages/functionals/botpress-qna\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 48e4ad84d6d51a19c87a","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 0\n// module chunks = 0","import mkdirp from 'mkdirp'\nimport path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport generate from 'nanoid/generate'\n\nconst safeId = (length = 10) => generate('1234567890abcdefghijklmnopqrsuvwxyz', length)\n\nconst slugify = s => (s || '').toLowerCase().replace(/[^a-z0-9]/g, '_')\n\nconst getQuestionId = ({ questions }) =>\n  `${safeId()}_${slugify(questions[0])\n    .replace(/^_+/, '')\n    .substring(0, 50)\n    .replace(/_+$/, '')}`\n\nexport const NLU_PREFIX = '__qna__'\n\nconst getIntentId = id => `${NLU_PREFIX}${id}`\n\nconst normalizeQuestions = questions =>\n  questions\n    .map(q =>\n      q\n        .replace(/[\\r\\n]+/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim()\n    )\n    .filter(Boolean)\n\nexport default class Storage {\n  constructor({ bp, config }) {\n    this.bp = bp\n    this.ghost = bp.ghostManager\n    this.projectDir = bp.projectLocation\n    this.qnaDir = config.qnaDir\n  }\n\n  async initialize() {\n    mkdirp.sync(path.resolve(this.projectDir, this.qnaDir))\n    await this.ghost.addRootFolder(this.qnaDir, { filesGlob: '**/*.json' })\n  }\n\n  async syncNlu() {\n    if (await this.bp.nlu.provider.checkSyncNeeded()) {\n      await this.bp.nlu.provider.sync()\n    }\n  }\n\n  async update(data, id) {\n    id = id || getQuestionId(data)\n    if (data.enabled) {\n      await this.bp.nlu.storage.saveIntent(getIntentId(id), {\n        entities: [],\n        utterances: normalizeQuestions(data.questions)\n      })\n    } else {\n      await this.bp.nlu.storage.deleteIntent(getIntentId(id))\n    }\n\n    await this.syncNlu()\n    await this.ghost.upsertFile(this.qnaDir, `${id}.json`, JSON.stringify({ id, data }, null, 2))\n\n    return id\n  }\n\n  async insert(qna, statusCb) {\n    const ids = await Promise.each(_.isArray(qna) ? qna : [qna], async (data, i) => {\n      const id = getQuestionId(data)\n      if (data.enabled) {\n        await this.bp.nlu.storage.saveIntent(getIntentId(id), {\n          entities: [],\n          utterances: normalizeQuestions(data.questions)\n        })\n      }\n      await this.ghost.upsertFile(this.qnaDir, `${id}.json`, JSON.stringify({ id, data }, null, 2))\n      statusCb && statusCb(i + 1)\n    })\n    await this.syncNlu()\n    return ids\n  }\n\n  async getQuestion(opts) {\n    let filename\n    if (typeof opts === 'string') {\n      filename = `${opts}.json`\n    } else {\n      // opts object\n      filename = opts.filename\n    }\n    const data = await this.ghost.readFile(this.qnaDir, filename)\n    return JSON.parse(data)\n  }\n\n  async count() {\n    const questions = await this.ghost.directoryListing(this.qnaDir, '.json')\n    return questions.length\n  }\n\n  async all({ limit, offset } = {}) {\n    let questions = await this.ghost.directoryListing(this.qnaDir, '.json')\n    if (typeof limit !== 'undefined' && typeof offset !== 'undefined') {\n      questions = questions.slice(offset, offset + limit)\n    }\n    return Promise.map(questions, question => this.getQuestion({ filename: question }))\n  }\n\n  async delete(qnaId) {\n    const ids = _.isArray(qnaId) ? qnaId : [qnaId]\n    if (ids.length === 0) {\n      return\n    }\n    await Promise.all(\n      ids.map(async id => {\n        const data = await this.getQuestion(id)\n        if (data.data.enabled) {\n          await this.bp.nlu.storage.deleteIntent(getIntentId(id))\n        }\n        await this.ghost.deleteFile(this.qnaDir, `${id}.json`)\n      })\n    )\n    await this.syncNlu()\n  }\n\n  async answersOn(text) {\n    const extract = await this.bp.nlu.provider.extract({ text })\n    const intents = _.chain([extract.intent, ...extract.intents])\n      .uniqBy('name')\n      .filter(({ name }) => name.startsWith('__qna__'))\n      .orderBy(['confidence'], ['desc'])\n      .value()\n\n    return Promise.all(\n      intents.map(async ({ name, confidence }) => {\n        const { data: { questions, answer } } = await this.getQuestion(name.replace('__qna__', ''))\n        return { questions, answer, confidence, id: name, metadata: [] }\n      })\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/nlu.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 2\n// module chunks = 0","import NluStorage from './providers/nlu'\nimport MicrosoftQnaMakerStorage, { qnaItemData } from './providers/qnaMaker'\nimport { processEvent } from './middleware'\nimport * as parsers from './parsers.js'\nimport _ from 'lodash'\nimport multer from 'multer'\nimport { Parser as Json2csvParser } from 'json2csv'\nimport yn from 'yn'\nimport moment from 'moment'\nimport iconv from 'iconv-lite'\nimport nanoid from 'nanoid'\n\nlet logger\nlet shouldProcessMessage\nconst csvUploadStatuses = {}\n\nconst recordCsvUploadStatus = (csvUploadStatusId, status) => {\n  if (!csvUploadStatusId) {\n    return\n  }\n  csvUploadStatuses[csvUploadStatusId] = status\n}\n\nmodule.exports = {\n  config: {\n    qnaDir: { type: 'string', required: true, default: './qna', env: 'QNA_DIR' },\n    textRenderer: { type: 'string', required: true, default: '#builtin_text', env: 'QNA_TEXT_RENDERER' },\n    exportCsvEncoding: { type: 'string', required: false, default: 'utf8', env: 'QNA_EXPORT_CSV_ENCODING' },\n    qnaMakerApiKey: { type: 'string', required: false, env: 'QNA_MAKER_API_KEY' },\n    qnaMakerKnowledgebase: { type: 'string', required: false, default: 'botpress', env: 'QNA_MAKER_KNOWLEDGEBASE' },\n    qnaCategories: { type: 'string', required: false, default: '', env: 'QNA_CATEGORIES' }\n  },\n  async init(bp, configurator) {\n    const config = await configurator.loadAll()\n    this.isMicrosoftMakerUsed = config.qnaMakerApiKey\n    const Storage = this.isMicrosoftMakerUsed ? MicrosoftQnaMakerStorage : NluStorage\n    this.storage = new Storage({ bp, config })\n    await this.storage.initialize()\n\n    logger = bp.logger\n\n    bp.middlewares.register({\n      name: 'qna.incoming',\n      module: 'botpress-qna',\n      type: 'incoming',\n      handler: async (event, next) => {\n        if (typeof shouldProcessMessage === 'function') {\n          const state = await bp.dialogEngine.stateManager.getState(event.sessionId || event.user.id)\n          const shouldSkip = (await shouldProcessMessage(event, state)) === false\n          if (shouldSkip) {\n            return next()\n          }\n        }\n        if (!await processEvent(event, { bp, storage: this.storage, logger, config })) {\n          next()\n        }\n      },\n      order: 11, // must be after the NLU middleware and before the dialog middleware\n      description: 'Listen for predefined questions and send canned responses.'\n    })\n  },\n  async ready(bp, configurator) {\n    const config = await configurator.loadAll()\n    const storage = this.storage\n    const categories = config.qnaCategories.split(',')\n    bp.qna = {\n      /**\n       * Parses and imports questions; consecutive questions with similar answer get merged\n       * @param {String|Array.<{question: String, action: String, answer: String}>} questions\n       * @param {Object} options\n       * @param {String} [options.format] - format of \"questions\" string ('csv' or 'json')\n       * @returns {Promise} Promise object represents an array of ids of imported questions\n       */\n      async import(questions, { format = 'json', csvUploadStatusId } = {}) {\n        recordCsvUploadStatus(csvUploadStatusId, 'Calculating diff with existing questions')\n        const existingQuestions = (await storage.all()).map(item => JSON.stringify(_.omit(item.data, 'enabled')))\n        const parsedQuestions =\n          typeof questions === 'string'\n            ? parsers[`${format}Parse`](questions, { hasCategory: config.qnaMakerApiKey })\n            : questions\n        const questionsToSave = parsedQuestions.filter(item => !existingQuestions.includes(JSON.stringify(item)))\n\n        if (config.qnaMakerApiKey) {\n          recordCsvUploadStatus(csvUploadStatusId, `Inserting ${questionsToSave.length} questions in bulk`)\n        }\n\n        const statusCb = processedCount =>\n          recordCsvUploadStatus(csvUploadStatusId, `Saved ${processedCount}/${questionsToSave.length} questions`)\n        return storage.insert(questionsToSave.map(question => ({ ...question, enabled: true })), statusCb)\n      },\n\n      /**\n       * @async\n       * Fetches questions and represents them as json\n       * @param {Object} options\n       * @param {Boolean} [options.flat = false] - whether multiple questions get split into separate records\n       * @returns {Array.<{questions: Array, question: String, action: String, answer: String}>}\n       */\n      async export({ flat = false } = {}) {\n        const qnas = await storage.all()\n\n        return qnas.flatMap(question => {\n          const { data } = question\n          const { questions, answer: textAnswer, action, redirectNode, redirectFlow, category } = data\n\n          let answer = textAnswer\n          let answer2 = null\n\n          if (action === 'redirect') {\n            answer = redirectFlow\n            if (redirectNode) {\n              answer += '#' + redirectNode\n            }\n          } else if (action === 'text_redirect') {\n            answer2 = redirectFlow\n            if (redirectNode) {\n              answer2 += '#' + redirectNode\n            }\n          }\n\n          const categoryWrapper = config.qnaMakerApiKey ? { category } : {}\n\n          if (!flat) {\n            return { questions, action, answer, answer2, ...categoryWrapper }\n          }\n          return questions.map(question => ({ question, action, answer, answer2, ...categoryWrapper }))\n        })\n      },\n\n      /**\n       * Accepts async function that is later used to check if Q&A module should intercept\n       * @param {function} fn\n       */\n      shouldProcessMessage(fn) {\n        shouldProcessMessage = fn\n      },\n\n      /**\n       * @async\n       * Returns question by id\n       * @param {String} id - id of the question to look for\n       * @returns {Object}\n       */\n      getQuestion: storage.getQuestion.bind(storage),\n\n      /**\n       * @async\n       * Returns array of matchings questions-answers along with their confidence level\n       * @param {String} question - question to match against\n       * @returns {Array.<{questions: Array, answer: String, id: String, confidence: Number, metadata: Array}>}\n       */\n      answersOn: storage.answersOn.bind(storage)\n    }\n\n    const router = bp.getRouter('botpress-qna')\n\n    const getFieldFromMetadata = (metadata, field) => metadata.find(({ name }) => name === field)\n\n    const filterByCategoryAndQuestion = async ({ question, categories }) => {\n      const allQuestions = await this.storage.fetchQuestions()\n      const filteredQuestions = allQuestions.filter(({ questions, metadata }) => {\n        const category = getFieldFromMetadata(metadata, 'category')\n\n        const isRightId =\n          questions\n            .join('\\n')\n            .toLowerCase()\n            .indexOf(question.toLowerCase()) !== -1\n\n        if (!categories.length) {\n          return isRightId\n        }\n\n        if (!question) {\n          return category && categories.indexOf(category.value) !== -1\n        }\n\n        return isRightId && category && categories.indexOf(category.value) !== -1\n      })\n\n      const questions = filteredQuestions.reverse().map(qna => ({ id: qna.id, data: qnaItemData(qna) }))\n\n      return questions\n    }\n\n    const getQuestions = async ({ question = '', categories = [] }, { limit = 50, offset = 0 }) => {\n      let items = []\n      let count = 0\n\n      if (!(question || categories.length)) {\n        items = await this.storage.all({\n          limit: limit ? parseInt(limit) : undefined,\n          offset: offset ? parseInt(offset) : undefined\n        })\n        count = await this.storage.count()\n      } else {\n        const tmpQuestions = await filterByCategoryAndQuestion({ question, categories })\n        items = tmpQuestions.slice(offset, offset + limit)\n        count = tmpQuestions.length\n      }\n\n      return { items, count }\n    }\n\n    router.get('/', async ({ query: { question = '', categories = [], limit, offset } }, res) => {\n      try {\n        const items = await getQuestions({ question, categories }, { limit, offset })\n        res.send({ ...items })\n      } catch (e) {\n        logger.error('QnA Error', e, e.stack)\n        res.status(500).send(e.message || 'Error')\n      }\n    })\n\n    router.post('/', async (req, res) => {\n      try {\n        bp.events.emit('toast.qna-save', { text: 'QnA Save In Progress', type: 'info', time: 120000 })\n        const id = await this.storage.insert(req.body)\n\n        res.send(id)\n\n        bp.events.emit('toast.qna-save', { text: 'QnA Save Success', type: 'success' })\n      } catch (e) {\n        logger.error('QnA Error', e, e.stack)\n        res.status(500).send(e.message || 'Error')\n\n        bp.events.emit('toast.qna-save', { text: `QnA Save Error: ${e.message}`, type: 'error' })\n      }\n    })\n\n    router.get('/question/:id', async (req, res) => {\n      try {\n        const question = await this.storage.getQuestion(req.params.id)\n\n        res.send(question)\n      } catch (err) {\n        bp.events.emit('toast.qna-save', { text: `QnA Fetch Error: ${err.message}`, type: 'error' })\n      }\n    })\n\n    router.put('/:question', async (req, res) => {\n      const { query: { limit, offset, question, categories } } = req\n\n      try {\n        bp.events.emit('toast.qna-save', { text: 'QnA Update In Progress', type: 'info', time: 120000 })\n        await this.storage.update(req.body, req.params.question)\n        const questions = await getQuestions({ question, categories }, { limit, offset })\n\n        bp.events.emit('toast.qna-save', { text: 'QnA Update Success', type: 'success' })\n\n        res.send(questions)\n      } catch (e) {\n        logger.error('QnA Error', e, e.stack)\n        res.status(500).send(e.message || 'Error')\n        bp.events.emit('toast.qna-save', { text: `QnA Update Error: ${e.message}`, type: 'error' })\n      }\n    })\n\n    router.delete('/:question', async (req, res) => {\n      const { query: { limit, offset, question, categories } } = req\n      try {\n        bp.events.emit('toast.qna-save', { text: 'QnA Delete In Progress', type: 'info', time: 120000 })\n        await this.storage.delete(req.params.question)\n\n        const questionsData = await getQuestions({ question, categories }, { limit, offset })\n\n        bp.events.emit('toast.qna-save', { text: 'QnA Delete Success', type: 'success' })\n\n        res.send(questionsData)\n      } catch (e) {\n        logger.error('QnA Error', e, e.stack)\n        res.status(500).send(e.message || 'Error')\n\n        bp.events.emit('toast.qna-save', { text: `QnA Delete Error: ${e.message}`, type: 'error' })\n      }\n    })\n\n    router.get('/csv', async (req, res) => {\n      res.setHeader('Content-Type', 'text/csv')\n      res.setHeader('Content-disposition', `attachment; filename=qna_${moment().format('DD-MM-YYYY')}.csv`)\n      const categoryWrapper = this.isMicrosoftMakerUsed ? ['category'] : []\n      const parseOptions = {\n        fields: ['question', 'action', 'answer', 'answer2', ...categoryWrapper],\n        header: true\n      }\n\n      const json2csvParser = new Json2csvParser(parseOptions)\n\n      res.end(iconv.encode(json2csvParser.parse(await bp.qna.export({ flat: true })), config.exportCsvEncoding))\n    })\n\n    const upload = multer()\n    router.post('/csv', upload.single('csv'), async (req, res) => {\n      const csvUploadStatusId = nanoid()\n      res.end(csvUploadStatusId)\n      recordCsvUploadStatus(csvUploadStatusId, 'Deleting existing questions')\n      if (yn(req.body.isReplace)) {\n        const questions = await this.storage.all()\n\n        const statusCb = processedCount =>\n          recordCsvUploadStatus(csvUploadStatusId, `Deleted ${processedCount}/${questions.length} questions`)\n        await this.storage.delete(questions.map(({ id }) => id), statusCb)\n      }\n\n      try {\n        const questions = iconv.decode(req.file.buffer, config.exportCsvEncoding)\n\n        await bp.qna.import(questions, { format: 'csv', csvUploadStatusId })\n        recordCsvUploadStatus(csvUploadStatusId, 'Completed')\n      } catch (e) {\n        logger.error('QnA Error:', e)\n        recordCsvUploadStatus(csvUploadStatusId, `Error: ${e.message}`)\n      }\n    })\n\n    router.get('/csv-upload-status/:csvUploadStatusId', async (req, res) => {\n      res.end(csvUploadStatuses[req.params.csvUploadStatusId])\n    })\n\n    router.get('/categories', (req, res) => {\n      res.send({ categories })\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"mkdirp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mkdirp\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"nanoid/generate\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"nanoid/generate\"\n// module id = 7\n// module chunks = 0","import axios from 'axios'\nimport _ from 'lodash'\nimport ms from 'ms'\nimport Promise from 'bluebird'\n\n// Handles QnA Maker API downcasing all key-values in metadata\nconst markUpperCase = str => str.replace(/([A-Z])/g, 'a-a-a-a-a$1a-a-a-a-a')\nconst restoreUpperCase = str => str.replace(/a-a-a-a-a([a-zA-Z])a-a-a-a-a/g, (_, c) => c.toUpperCase())\nconst keysToRestore = { redirectflow: 'redirectFlow', redirectnode: 'redirectNode' }\n\nexport const qnaItemData = ({ questions, answer, metadata }) => ({\n  questions,\n  answer,\n  ..._.fromPairs(metadata.map(({ name, value }) => [keysToRestore[name] || name, restoreUpperCase(value)])),\n  enabled: (metadata.find(({ name }) => name === 'enabled') || {}).value === 'true'\n})\n\nconst prepareMeta = data =>\n  _.chain(data)\n    .pick(['enabled', 'action', 'redirectFlow', 'redirectNode', 'category'])\n    .toPairs()\n    .map(([name, value]) => ({ name, value: _.isString(value) ? markUpperCase(value) : value }))\n    .filter(({ value }) => !_.isUndefined(value) && value !== '')\n    .value()\n\nexport default class Storage {\n  constructor({ bp, config }) {\n    const baseURL = 'https://westus.api.cognitive.microsoft.com/qnamaker/v4.0'\n    const headers = { 'Ocp-Apim-Subscription-Key': config.qnaMakerApiKey }\n    Object.assign(this, {\n      bp,\n      client: axios.create({ baseURL, headers }),\n      knowledgebaseName: config.qnaMakerKnowledgebase\n    })\n  }\n\n  async initialize() {\n    const isBpKnowledgbase = ({ name }) => name === this.knowledgebaseName\n    const { data: { knowledgebases: initialKnowledgebases } } = await this.client.get('/knowledgebases/')\n    const existingKb = initialKnowledgebases.find(isBpKnowledgbase)\n    if (existingKb) {\n      this.knowledgebase = existingKb\n    } else {\n      const { data: { operationId } } = await this.client.post('/knowledgebases/create', {\n        name: this.knowledgebaseName\n      })\n      await this.waitForOperationToFinish(operationId, 'creating KB')\n      const { data: { knowledgebases } } = await this.client.get('/knowledgebases/')\n      this.knowledgebase = knowledgebases.find(isBpKnowledgbase)\n    }\n\n    this.endpointKey = (await this.client.get('/endpointkeys')).data.primaryEndpointKey\n  }\n\n  publish = () => this.client.post(`/knowledgebases/${this.knowledgebase.id}`)\n\n  patchKb = params => this.client.patch(`/knowledgebases/${this.knowledgebase.id}`, params)\n\n  waitForOperationToFinish = async (operationId, description) => {\n    await Promise.delay(200)\n    while (true) {\n      const { data, headers: { 'retry-after': timeout } } = await this.client.get(`/operations/${operationId}`)\n      this.bp.logger.info(`[QNA] QnA Maker ${description} #${operationId} ${data.operationState}`)\n      if (data.operationState === 'Failed') {\n        this.bp.logger.error(data.errorResponse.error)\n      }\n      if (!['Running', 'NotStarted'].includes(data.operationState)) {\n        return\n      }\n      await Promise.delay(ms('3s'))\n    }\n  }\n\n  async update(data, id) {\n    const prevData = await this.getQuestion(id)\n\n    const questionsChanged = _.isEqual(data.questions, prevData.questions)\n    const questionsToAdd = _.difference(data.questions, prevData.questions)\n    const questionsToDelete = _.difference(prevData.questions, data.questions)\n\n    const { data: { operationId } } = await this.patchKb({\n      update: {\n        qnaList: [\n          {\n            id,\n            answer: data.answer,\n            ...(questionsChanged ? {} : { questions: { add: questionsToAdd, delete: questionsToDelete } }),\n            metadata: { delete: prevData.metadata, add: prepareMeta(data) }\n          }\n        ]\n      }\n    })\n\n    await this.waitForOperationToFinish(operationId)\n\n    this.invalidateCache()\n    await this.publish()\n    return id\n  }\n\n  async insert(qna) {\n    const qnas = _.isArray(qna) ? qna : [qna]\n    const { data: { operationId } } = await this.patchKb({\n      add: {\n        qnaList: qnas.map(qna => ({\n          answer: qna.answer,\n          questions: qna.questions.reverse(), // To be able to prepend questions\n          metadata: prepareMeta(qna)\n        }))\n      }\n    })\n\n    await this.waitForOperationToFinish(operationId, 'inserting qnaItems')\n    this.invalidateCache()\n    await this.publish()\n    // TODO: should return ids (for consistency)\n  }\n\n  async fetchQuestions() {\n    if (!this.questions) {\n      const { data: { qnaDocuments } } = await this.client.get(`/knowledgebases/${this.knowledgebase.id}/test/qna/`)\n\n      // Showing latest items first\n      this.questions = qnaDocuments.reverse().map(doc => ({ ...doc, questions: doc.questions.reverse() }))\n    }\n\n    return this.questions\n  }\n\n  invalidateCache = () => (this.questions = null)\n\n  async getQuestion(id) {\n    const question = (await this.fetchQuestions()).find(({ id: qnaId }) => qnaId == id)\n    if (!question) {\n      return\n    }\n    return { id: question.id, data: qnaItemData(question) }\n  }\n\n  async count() {\n    const questions = await this.fetchQuestions()\n    return questions.length\n  }\n\n  async all({ limit, offset } = {}) {\n    let questions = await this.fetchQuestions()\n    if (typeof limit !== 'undefined' && typeof offset !== 'undefined') {\n      questions = questions.slice(offset, offset + limit)\n    }\n\n    return questions.map(qna => ({ id: qna.id, data: qnaItemData(qna) }))\n  }\n\n  async answersOn(question, category = null) {\n    const metadataFilters = category ? [{ name: 'category', value: category }] : []\n    const resp = await axios.post(\n      `/qnamaker/knowledgebases/${this.knowledgebase.id}/generateAnswer`,\n      { question, top: 10, strictFilters: [{ name: 'enabled', value: true }, ...metadataFilters] },\n      { baseURL: this.knowledgebase.hostName, headers: { Authorization: `EndpointKey ${this.endpointKey}` } }\n    )\n    const { data: { answers } } = resp\n\n    return _.orderBy(answers, ['score'], ['desc']).map(answer => ({\n      ..._.pick(answer, ['questions', 'answer', 'id', 'metadata', 'enabled']),\n      confidence: answer.score / 100,\n      ...qnaItemData(answer)\n    }))\n  }\n\n  async delete(id, statusCb) {\n    const ids = _.isArray(id) ? id : [id]\n    if (ids.length === 0) {\n      return\n    }\n    const maxQuestionsToDeletePerRequest = 300\n    await Promise.each(_.chunk(ids, maxQuestionsToDeletePerRequest), async (idsChunk, i) => {\n      const { data: { operationId } } = await this.client.patch(`/knowledgebases/${this.knowledgebase.id}`, {\n        delete: { ids: idsChunk }\n      })\n      await this.waitForOperationToFinish(operationId, 'deleting qnaItems')\n      statusCb && statusCb(Math.min((i + 1) * maxQuestionsToDeletePerRequest, ids.length))\n    })\n    this.invalidateCache()\n    await this.publish()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/qnaMaker.js","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 9\n// module chunks = 0","module.exports = require(\"ms\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ms\"\n// module id = 10\n// module chunks = 0","import { NLU_PREFIX } from './providers/nlu'\n\nexport const processEvent = async (event, { bp, storage, logger, config }) => {\n  let answer\n  if (config.qnaMakerApiKey) {\n    answer = (await bp.qna.answersOn(event.text)).pop()\n    if (!answer) {\n      return false\n    }\n    logger.debug('QnA: matched QnA-maker question', answer.id)\n  } else {\n    // NB: we rely on NLU being loaded before we receive any event.\n    // I'm not sure yet if we can guarantee it\n    if (!(event.nlu || {}).intent || !event.nlu.intent.startsWith(NLU_PREFIX)) {\n      return false\n    }\n\n    logger.debug('QnA: matched NLU intent', event.nlu.intent.name)\n    const id = event.nlu.intent.name.substring(NLU_PREFIX.length)\n    answer = (await storage.getQuestion(id)).data\n  }\n\n  if (!answer.enabled) {\n    logger.debug('QnA: question disabled, skipping')\n    return false\n  }\n\n  if (answer.action.includes('text')) {\n    logger.debug('QnA: replying to recognized question with plain text answer', answer.id)\n    event.reply(config.textRenderer, { text: answer.answer })\n    // return `true` to prevent further middlewares from capturing the message\n\n    if (answer.action === 'text') {\n      return true\n    }\n  }\n\n  if (answer.action.includes('redirect')) {\n    logger.debug('QnA: replying to recognized question with redirect', answer.id)\n    // TODO: This is used as the `stateId` by the bot template\n    // Not sure if it's universal enough for every use-case but\n    // I don't see a better alternative as of now\n    const stateId = event.sessionId || event.user.id\n    logger.debug('QnA: jumping', stateId, answer.redirectFlow, answer.redirectNode)\n    await bp.dialogEngine.jumpTo(stateId, answer.redirectFlow, answer.redirectNode)\n    // We return false here because the we only jump to the right flow/node and let\n    // the bot's natural middleware chain take care of processing the message the normal way\n    return false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/middleware.js","import get from 'lodash/get'\nimport parseCsvToJson from 'csv-parse/lib/sync'\n\nconst parseFlow = str => {\n  const [redirectFlow, redirectNode = ''] = str.split('#')\n  return { redirectFlow, redirectNode }\n}\n\nexport const jsonParse = (jsonContent, options) =>\n  jsonContent.map(({ questions, answer: instruction, answer2, action, category }, i) => {\n    if (!['text', 'redirect', 'text_redirect'].includes(action)) {\n      throw new Error(\n        `Failed to process CSV-row ${i + 1}: action should be either \"text\", \"redirect\" or \"text_redirect\"`\n      )\n    }\n\n    let redirectInstruction = null\n    let textAnswer = ''\n    const { hasCategory } = options\n\n    if (action === 'text') {\n      textAnswer = instruction\n    } else if (action === 'redirect') {\n      redirectInstruction = instruction\n    } else if (action === 'text_redirect') {\n      textAnswer = instruction\n      redirectInstruction = answer2\n    }\n\n    const flowParams = redirectInstruction ? parseFlow(redirectInstruction) : { redirectFlow: '', redirectNode: '' }\n    const categoryWrapper = hasCategory ? { category } : {}\n\n    return { questions, action, answer: textAnswer, ...flowParams, ...categoryWrapper }\n  })\n\nexport const csvParse = (csvContent, options) => {\n  const { hasCategory } = options\n\n  const mergeRows = (acc, { question, answer, answer2, category, action }) => {\n    const [prevRow] = acc.slice(-1)\n    const isSameAnswer = prevRow && (prevRow.answer === answer && (!answer2 || answer2 === prevRow.answer2))\n\n    if (isSameAnswer) {\n      return [...acc.slice(0, acc.length - 1), { ...prevRow, questions: [...prevRow.questions, question] }]\n    }\n    const categoryWrapper = hasCategory ? { category } : {}\n\n    return [...acc, { answer, answer2, action, ...categoryWrapper, questions: [question] }]\n  }\n  const categoryWrapper = hasCategory ? ['category'] : []\n\n  const rows = parseCsvToJson(csvContent, {\n    columns: ['question', 'action', 'answer', 'answer2', ...categoryWrapper]\n  }).reduce(mergeRows, [])\n\n  // We trim the header if detected in the first row\n  if (get(rows, '0.action') === 'action') {\n    rows.splice(0, 1)\n  }\n\n  return jsonParse(rows, options)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parsers.js","module.exports = require(\"lodash/get\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/get\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"csv-parse/lib/sync\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"csv-parse/lib/sync\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"multer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"multer\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"json2csv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"json2csv\"\n// module id = 16\n// module chunks = 0","module.exports = require(\"yn\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"yn\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 18\n// module chunks = 0","module.exports = require(\"iconv-lite\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"iconv-lite\"\n// module id = 19\n// module chunks = 0","module.exports = require(\"nanoid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"nanoid\"\n// module id = 20\n// module chunks = 0"],"sourceRoot":""}