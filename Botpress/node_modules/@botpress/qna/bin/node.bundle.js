module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/home/epaminond/private/projects/2015.08.08_keenethics/projects/botpress/botpress/packages/functionals/botpress-qna";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NLU_PREFIX = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mkdirp = __webpack_require__(5);

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = __webpack_require__(6);

var _path2 = _interopRequireDefault(_path);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = __webpack_require__(2);

var _bluebird2 = _interopRequireDefault(_bluebird);

var _generate = __webpack_require__(7);

var _generate2 = _interopRequireDefault(_generate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var safeId = function safeId() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  return (0, _generate2.default)('1234567890abcdefghijklmnopqrsuvwxyz', length);
};

var slugify = function slugify(s) {
  return (s || '').toLowerCase().replace(/[^a-z0-9]/g, '_');
};

var getQuestionId = function getQuestionId(_ref) {
  var questions = _ref.questions;
  return safeId() + '_' + slugify(questions[0]).replace(/^_+/, '').substring(0, 50).replace(/_+$/, '');
};

var NLU_PREFIX = exports.NLU_PREFIX = '__qna__';

var getIntentId = function getIntentId(id) {
  return '' + NLU_PREFIX + id;
};

var normalizeQuestions = function normalizeQuestions(questions) {
  return questions.map(function (q) {
    return q.replace(/[\r\n]+/g, ' ').replace(/\s+/g, ' ').trim();
  }).filter(Boolean);
};

var Storage = function () {
  function Storage(_ref2) {
    var bp = _ref2.bp,
        config = _ref2.config;

    _classCallCheck(this, Storage);

    this.bp = bp;
    this.ghost = bp.ghostManager;
    this.projectDir = bp.projectLocation;
    this.qnaDir = config.qnaDir;
  }

  _createClass(Storage, [{
    key: 'initialize',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _mkdirp2.default.sync(_path2.default.resolve(this.projectDir, this.qnaDir));
                _context.next = 3;
                return this.ghost.addRootFolder(this.qnaDir, { filesGlob: '**/*.json' });

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize() {
        return _ref3.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: 'syncNlu',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.bp.nlu.provider.checkSyncNeeded();

              case 2:
                if (!_context2.sent) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 5;
                return this.bp.nlu.provider.sync();

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function syncNlu() {
        return _ref4.apply(this, arguments);
      }

      return syncNlu;
    }()
  }, {
    key: 'update',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(data, id) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                id = id || getQuestionId(data);

                if (!data.enabled) {
                  _context3.next = 6;
                  break;
                }

                _context3.next = 4;
                return this.bp.nlu.storage.saveIntent(getIntentId(id), {
                  entities: [],
                  utterances: normalizeQuestions(data.questions)
                });

              case 4:
                _context3.next = 8;
                break;

              case 6:
                _context3.next = 8;
                return this.bp.nlu.storage.deleteIntent(getIntentId(id));

              case 8:
                _context3.next = 10;
                return this.syncNlu();

              case 10:
                _context3.next = 12;
                return this.ghost.upsertFile(this.qnaDir, id + '.json', JSON.stringify({ id: id, data: data }, null, 2));

              case 12:
                return _context3.abrupt('return', id);

              case 13:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x2, _x3) {
        return _ref5.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: 'insert',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(qna, statusCb) {
        var _this = this;

        var ids;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _bluebird2.default.each(_lodash2.default.isArray(qna) ? qna : [qna], function () {
                  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data, i) {
                    var id;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            id = getQuestionId(data);

                            if (!data.enabled) {
                              _context4.next = 4;
                              break;
                            }

                            _context4.next = 4;
                            return _this.bp.nlu.storage.saveIntent(getIntentId(id), {
                              entities: [],
                              utterances: normalizeQuestions(data.questions)
                            });

                          case 4:
                            _context4.next = 6;
                            return _this.ghost.upsertFile(_this.qnaDir, id + '.json', JSON.stringify({ id: id, data: data }, null, 2));

                          case 6:
                            statusCb && statusCb(i + 1);

                          case 7:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this);
                  }));

                  return function (_x6, _x7) {
                    return _ref7.apply(this, arguments);
                  };
                }());

              case 2:
                ids = _context5.sent;
                _context5.next = 5;
                return this.syncNlu();

              case 5:
                return _context5.abrupt('return', ids);

              case 6:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function insert(_x4, _x5) {
        return _ref6.apply(this, arguments);
      }

      return insert;
    }()
  }, {
    key: 'getQuestion',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(opts) {
        var filename, data;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                filename = void 0;

                if (typeof opts === 'string') {
                  filename = opts + '.json';
                } else {
                  // opts object
                  filename = opts.filename;
                }
                _context6.next = 4;
                return this.ghost.readFile(this.qnaDir, filename);

              case 4:
                data = _context6.sent;
                return _context6.abrupt('return', JSON.parse(data));

              case 6:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getQuestion(_x8) {
        return _ref8.apply(this, arguments);
      }

      return getQuestion;
    }()
  }, {
    key: 'count',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var questions;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.ghost.directoryListing(this.qnaDir, '.json');

              case 2:
                questions = _context7.sent;
                return _context7.abrupt('return', questions.length);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function count() {
        return _ref9.apply(this, arguments);
      }

      return count;
    }()
  }, {
    key: 'all',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var _this2 = this;

        var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            limit = _ref11.limit,
            offset = _ref11.offset;

        var questions;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.ghost.directoryListing(this.qnaDir, '.json');

              case 2:
                questions = _context8.sent;

                if (typeof limit !== 'undefined' && typeof offset !== 'undefined') {
                  questions = questions.slice(offset, offset + limit);
                }
                return _context8.abrupt('return', _bluebird2.default.map(questions, function (question) {
                  return _this2.getQuestion({ filename: question });
                }));

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function all() {
        return _ref10.apply(this, arguments);
      }

      return all;
    }()
  }, {
    key: 'delete',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(qnaId) {
        var _this3 = this;

        var ids;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                ids = _lodash2.default.isArray(qnaId) ? qnaId : [qnaId];

                if (!(ids.length === 0)) {
                  _context10.next = 3;
                  break;
                }

                return _context10.abrupt('return');

              case 3:
                _context10.next = 5;
                return _bluebird2.default.all(ids.map(function () {
                  var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(id) {
                    var data;
                    return regeneratorRuntime.wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            _context9.next = 2;
                            return _this3.getQuestion(id);

                          case 2:
                            data = _context9.sent;

                            if (!data.data.enabled) {
                              _context9.next = 6;
                              break;
                            }

                            _context9.next = 6;
                            return _this3.bp.nlu.storage.deleteIntent(getIntentId(id));

                          case 6:
                            _context9.next = 8;
                            return _this3.ghost.deleteFile(_this3.qnaDir, id + '.json');

                          case 8:
                          case 'end':
                            return _context9.stop();
                        }
                      }
                    }, _callee9, _this3);
                  }));

                  return function (_x11) {
                    return _ref13.apply(this, arguments);
                  };
                }()));

              case 5:
                _context10.next = 7;
                return this.syncNlu();

              case 7:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function _delete(_x10) {
        return _ref12.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: 'answersOn',
    value: function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(text) {
        var _this4 = this;

        var extract, intents;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.bp.nlu.provider.extract({ text: text });

              case 2:
                extract = _context12.sent;
                intents = _lodash2.default.chain([extract.intent].concat(_toConsumableArray(extract.intents))).uniqBy('name').filter(function (_ref15) {
                  var name = _ref15.name;
                  return name.startsWith('__qna__');
                }).orderBy(['confidence'], ['desc']).value();
                return _context12.abrupt('return', _bluebird2.default.all(intents.map(function () {
                  var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(_ref17) {
                    var name = _ref17.name,
                        confidence = _ref17.confidence;

                    var _ref18, _ref18$data, questions, answer;

                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            _context11.next = 2;
                            return _this4.getQuestion(name.replace('__qna__', ''));

                          case 2:
                            _ref18 = _context11.sent;
                            _ref18$data = _ref18.data;
                            questions = _ref18$data.questions;
                            answer = _ref18$data.answer;
                            return _context11.abrupt('return', { questions: questions, answer: answer, confidence: confidence, id: name, metadata: [] });

                          case 7:
                          case 'end':
                            return _context11.stop();
                        }
                      }
                    }, _callee11, _this4);
                  }));

                  return function (_x13) {
                    return _ref16.apply(this, arguments);
                  };
                }())));

              case 5:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function answersOn(_x12) {
        return _ref14.apply(this, arguments);
      }

      return answersOn;
    }()
  }]);

  return Storage;
}();

exports.default = Storage;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("bluebird");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _nlu = __webpack_require__(1);

var _nlu2 = _interopRequireDefault(_nlu);

var _qnaMaker = __webpack_require__(8);

var _qnaMaker2 = _interopRequireDefault(_qnaMaker);

var _middleware = __webpack_require__(11);

var _parsers = __webpack_require__(12);

var parsers = _interopRequireWildcard(_parsers);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _multer = __webpack_require__(15);

var _multer2 = _interopRequireDefault(_multer);

var _json2csv = __webpack_require__(16);

var _yn = __webpack_require__(17);

var _yn2 = _interopRequireDefault(_yn);

var _moment = __webpack_require__(18);

var _moment2 = _interopRequireDefault(_moment);

var _iconvLite = __webpack_require__(19);

var _iconvLite2 = _interopRequireDefault(_iconvLite);

var _nanoid = __webpack_require__(20);

var _nanoid2 = _interopRequireDefault(_nanoid);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var logger = void 0;
var _shouldProcessMessage = void 0;
var csvUploadStatuses = {};

var recordCsvUploadStatus = function recordCsvUploadStatus(csvUploadStatusId, status) {
  if (!csvUploadStatusId) {
    return;
  }
  csvUploadStatuses[csvUploadStatusId] = status;
};

module.exports = {
  config: {
    qnaDir: { type: 'string', required: true, default: './qna', env: 'QNA_DIR' },
    textRenderer: { type: 'string', required: true, default: '#builtin_text', env: 'QNA_TEXT_RENDERER' },
    exportCsvEncoding: { type: 'string', required: false, default: 'utf8', env: 'QNA_EXPORT_CSV_ENCODING' },
    qnaMakerApiKey: { type: 'string', required: false, env: 'QNA_MAKER_API_KEY' },
    qnaMakerKnowledgebase: { type: 'string', required: false, default: 'botpress', env: 'QNA_MAKER_KNOWLEDGEBASE' },
    qnaCategories: { type: 'string', required: false, default: '', env: 'QNA_CATEGORIES' }
  },
  init: function init(bp, configurator) {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var config, Storage;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return configurator.loadAll();

            case 2:
              config = _context2.sent;

              _this.isMicrosoftMakerUsed = config.qnaMakerApiKey;
              Storage = _this.isMicrosoftMakerUsed ? _qnaMaker2.default : _nlu2.default;

              _this.storage = new Storage({ bp: bp, config: config });
              _context2.next = 8;
              return _this.storage.initialize();

            case 8:

              logger = bp.logger;

              bp.middlewares.register({
                name: 'qna.incoming',
                module: 'botpress-qna',
                type: 'incoming',
                handler: function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event, next) {
                    var state, shouldSkip;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(typeof _shouldProcessMessage === 'function')) {
                              _context.next = 10;
                              break;
                            }

                            _context.next = 3;
                            return bp.dialogEngine.stateManager.getState(event.sessionId || event.user.id);

                          case 3:
                            state = _context.sent;
                            _context.next = 6;
                            return _shouldProcessMessage(event, state);

                          case 6:
                            _context.t0 = _context.sent;
                            shouldSkip = _context.t0 === false;

                            if (!shouldSkip) {
                              _context.next = 10;
                              break;
                            }

                            return _context.abrupt('return', next());

                          case 10:
                            _context.next = 12;
                            return (0, _middleware.processEvent)(event, { bp: bp, storage: _this.storage, logger: logger, config: config });

                          case 12:
                            if (_context.sent) {
                              _context.next = 14;
                              break;
                            }

                            next();

                          case 14:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this);
                  }));

                  return function handler(_x, _x2) {
                    return _ref.apply(this, arguments);
                  };
                }(),
                order: 11, // must be after the NLU middleware and before the dialog middleware
                description: 'Listen for predefined questions and send canned responses.'
              });

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    }))();
  },
  ready: function ready(bp, configurator) {
    var _this2 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
      var config, storage, categories, router, getFieldFromMetadata, filterByCategoryAndQuestion, getQuestions, upload;
      return regeneratorRuntime.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return configurator.loadAll();

            case 2:
              config = _context15.sent;
              storage = _this2.storage;
              categories = config.qnaCategories.split(',');

              bp.qna = {
                /**
                 * Parses and imports questions; consecutive questions with similar answer get merged
                 * @param {String|Array.<{question: String, action: String, answer: String}>} questions
                 * @param {Object} options
                 * @param {String} [options.format] - format of "questions" string ('csv' or 'json')
                 * @returns {Promise} Promise object represents an array of ids of imported questions
                 */
                import: function _import(questions) {
                  var _this3 = this;

                  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                      _ref2$format = _ref2.format,
                      format = _ref2$format === undefined ? 'json' : _ref2$format,
                      csvUploadStatusId = _ref2.csvUploadStatusId;

                  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                    var existingQuestions, parsedQuestions, questionsToSave, statusCb;
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            recordCsvUploadStatus(csvUploadStatusId, 'Calculating diff with existing questions');
                            _context3.next = 3;
                            return storage.all();

                          case 3:
                            _context3.t0 = function (item) {
                              return JSON.stringify(_lodash2.default.omit(item.data, 'enabled'));
                            };

                            existingQuestions = _context3.sent.map(_context3.t0);
                            parsedQuestions = typeof questions === 'string' ? parsers[format + 'Parse'](questions, { hasCategory: config.qnaMakerApiKey }) : questions;
                            questionsToSave = parsedQuestions.filter(function (item) {
                              return !existingQuestions.includes(JSON.stringify(item));
                            });


                            if (config.qnaMakerApiKey) {
                              recordCsvUploadStatus(csvUploadStatusId, 'Inserting ' + questionsToSave.length + ' questions in bulk');
                            }

                            statusCb = function statusCb(processedCount) {
                              return recordCsvUploadStatus(csvUploadStatusId, 'Saved ' + processedCount + '/' + questionsToSave.length + ' questions');
                            };

                            return _context3.abrupt('return', storage.insert(questionsToSave.map(function (question) {
                              return _extends({}, question, { enabled: true });
                            }), statusCb));

                          case 10:
                          case 'end':
                            return _context3.stop();
                        }
                      }
                    }, _callee3, _this3);
                  }))();
                },


                /**
                 * @async
                 * Fetches questions and represents them as json
                 * @param {Object} options
                 * @param {Boolean} [options.flat = false] - whether multiple questions get split into separate records
                 * @returns {Array.<{questions: Array, question: String, action: String, answer: String}>}
                 */
                export: function _export() {
                  var _this4 = this;

                  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref3$flat = _ref3.flat,
                      flat = _ref3$flat === undefined ? false : _ref3$flat;

                  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                    var qnas;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            _context4.next = 2;
                            return storage.all();

                          case 2:
                            qnas = _context4.sent;
                            return _context4.abrupt('return', qnas.flatMap(function (question) {
                              var data = question.data;
                              var questions = data.questions,
                                  textAnswer = data.answer,
                                  action = data.action,
                                  redirectNode = data.redirectNode,
                                  redirectFlow = data.redirectFlow,
                                  category = data.category;


                              var answer = textAnswer;
                              var answer2 = null;

                              if (action === 'redirect') {
                                answer = redirectFlow;
                                if (redirectNode) {
                                  answer += '#' + redirectNode;
                                }
                              } else if (action === 'text_redirect') {
                                answer2 = redirectFlow;
                                if (redirectNode) {
                                  answer2 += '#' + redirectNode;
                                }
                              }

                              var categoryWrapper = config.qnaMakerApiKey ? { category: category } : {};

                              if (!flat) {
                                return _extends({ questions: questions, action: action, answer: answer, answer2: answer2 }, categoryWrapper);
                              }
                              return questions.map(function (question) {
                                return _extends({ question: question, action: action, answer: answer, answer2: answer2 }, categoryWrapper);
                              });
                            }));

                          case 4:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this4);
                  }))();
                },


                /**
                 * Accepts async function that is later used to check if Q&A module should intercept
                 * @param {function} fn
                 */
                shouldProcessMessage: function shouldProcessMessage(fn) {
                  _shouldProcessMessage = fn;
                },


                /**
                 * @async
                 * Returns question by id
                 * @param {String} id - id of the question to look for
                 * @returns {Object}
                 */
                getQuestion: storage.getQuestion.bind(storage),

                /**
                 * @async
                 * Returns array of matchings questions-answers along with their confidence level
                 * @param {String} question - question to match against
                 * @returns {Array.<{questions: Array, answer: String, id: String, confidence: Number, metadata: Array}>}
                 */
                answersOn: storage.answersOn.bind(storage)
              };

              router = bp.getRouter('botpress-qna');

              getFieldFromMetadata = function getFieldFromMetadata(metadata, field) {
                return metadata.find(function (_ref4) {
                  var name = _ref4.name;
                  return name === field;
                });
              };

              filterByCategoryAndQuestion = function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref6) {
                  var question = _ref6.question,
                      categories = _ref6.categories;
                  var allQuestions, filteredQuestions, questions;
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return _this2.storage.fetchQuestions();

                        case 2:
                          allQuestions = _context5.sent;
                          filteredQuestions = allQuestions.filter(function (_ref7) {
                            var questions = _ref7.questions,
                                metadata = _ref7.metadata;

                            var category = getFieldFromMetadata(metadata, 'category');

                            var isRightId = questions.join('\n').toLowerCase().indexOf(question.toLowerCase()) !== -1;

                            if (!categories.length) {
                              return isRightId;
                            }

                            if (!question) {
                              return category && categories.indexOf(category.value) !== -1;
                            }

                            return isRightId && category && categories.indexOf(category.value) !== -1;
                          });
                          questions = filteredQuestions.reverse().map(function (qna) {
                            return { id: qna.id, data: (0, _qnaMaker.qnaItemData)(qna) };
                          });
                          return _context5.abrupt('return', questions);

                        case 6:
                        case 'end':
                          return _context5.stop();
                      }
                    }
                  }, _callee5, _this2);
                }));

                return function filterByCategoryAndQuestion(_x5) {
                  return _ref5.apply(this, arguments);
                };
              }();

              getQuestions = function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref9, _ref10) {
                  var _ref9$question = _ref9.question,
                      question = _ref9$question === undefined ? '' : _ref9$question,
                      _ref9$categories = _ref9.categories,
                      categories = _ref9$categories === undefined ? [] : _ref9$categories;
                  var _ref10$limit = _ref10.limit,
                      limit = _ref10$limit === undefined ? 50 : _ref10$limit,
                      _ref10$offset = _ref10.offset,
                      offset = _ref10$offset === undefined ? 0 : _ref10$offset;
                  var items, count, tmpQuestions;
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          items = [];
                          count = 0;

                          if (question || categories.length) {
                            _context6.next = 11;
                            break;
                          }

                          _context6.next = 5;
                          return _this2.storage.all({
                            limit: limit ? parseInt(limit) : undefined,
                            offset: offset ? parseInt(offset) : undefined
                          });

                        case 5:
                          items = _context6.sent;
                          _context6.next = 8;
                          return _this2.storage.count();

                        case 8:
                          count = _context6.sent;
                          _context6.next = 16;
                          break;

                        case 11:
                          _context6.next = 13;
                          return filterByCategoryAndQuestion({ question: question, categories: categories });

                        case 13:
                          tmpQuestions = _context6.sent;

                          items = tmpQuestions.slice(offset, offset + limit);
                          count = tmpQuestions.length;

                        case 16:
                          return _context6.abrupt('return', { items: items, count: count });

                        case 17:
                        case 'end':
                          return _context6.stop();
                      }
                    }
                  }, _callee6, _this2);
                }));

                return function getQuestions(_x6, _x7) {
                  return _ref8.apply(this, arguments);
                };
              }();

              router.get('/', function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref12, res) {
                  var _ref12$query = _ref12.query,
                      _ref12$query$question = _ref12$query.question,
                      question = _ref12$query$question === undefined ? '' : _ref12$query$question,
                      _ref12$query$categori = _ref12$query.categories,
                      categories = _ref12$query$categori === undefined ? [] : _ref12$query$categori,
                      limit = _ref12$query.limit,
                      offset = _ref12$query.offset;
                  var items;
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.prev = 0;
                          _context7.next = 3;
                          return getQuestions({ question: question, categories: categories }, { limit: limit, offset: offset });

                        case 3:
                          items = _context7.sent;

                          res.send(_extends({}, items));
                          _context7.next = 11;
                          break;

                        case 7:
                          _context7.prev = 7;
                          _context7.t0 = _context7['catch'](0);

                          logger.error('QnA Error', _context7.t0, _context7.t0.stack);
                          res.status(500).send(_context7.t0.message || 'Error');

                        case 11:
                        case 'end':
                          return _context7.stop();
                      }
                    }
                  }, _callee7, _this2, [[0, 7]]);
                }));

                return function (_x8, _x9) {
                  return _ref11.apply(this, arguments);
                };
              }());

              router.post('/', function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(req, res) {
                  var id;
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.prev = 0;

                          bp.events.emit('toast.qna-save', { text: 'QnA Save In Progress', type: 'info', time: 120000 });
                          _context8.next = 4;
                          return _this2.storage.insert(req.body);

                        case 4:
                          id = _context8.sent;


                          res.send(id);

                          bp.events.emit('toast.qna-save', { text: 'QnA Save Success', type: 'success' });
                          _context8.next = 14;
                          break;

                        case 9:
                          _context8.prev = 9;
                          _context8.t0 = _context8['catch'](0);

                          logger.error('QnA Error', _context8.t0, _context8.t0.stack);
                          res.status(500).send(_context8.t0.message || 'Error');

                          bp.events.emit('toast.qna-save', { text: 'QnA Save Error: ' + _context8.t0.message, type: 'error' });

                        case 14:
                        case 'end':
                          return _context8.stop();
                      }
                    }
                  }, _callee8, _this2, [[0, 9]]);
                }));

                return function (_x10, _x11) {
                  return _ref13.apply(this, arguments);
                };
              }());

              router.get('/question/:id', function () {
                var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(req, res) {
                  var question;
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.prev = 0;
                          _context9.next = 3;
                          return _this2.storage.getQuestion(req.params.id);

                        case 3:
                          question = _context9.sent;


                          res.send(question);
                          _context9.next = 10;
                          break;

                        case 7:
                          _context9.prev = 7;
                          _context9.t0 = _context9['catch'](0);

                          bp.events.emit('toast.qna-save', { text: 'QnA Fetch Error: ' + _context9.t0.message, type: 'error' });

                        case 10:
                        case 'end':
                          return _context9.stop();
                      }
                    }
                  }, _callee9, _this2, [[0, 7]]);
                }));

                return function (_x12, _x13) {
                  return _ref14.apply(this, arguments);
                };
              }());

              router.put('/:question', function () {
                var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(req, res) {
                  var _req$query, limit, offset, question, categories, questions;

                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          _req$query = req.query, limit = _req$query.limit, offset = _req$query.offset, question = _req$query.question, categories = _req$query.categories;
                          _context10.prev = 1;

                          bp.events.emit('toast.qna-save', { text: 'QnA Update In Progress', type: 'info', time: 120000 });
                          _context10.next = 5;
                          return _this2.storage.update(req.body, req.params.question);

                        case 5:
                          _context10.next = 7;
                          return getQuestions({ question: question, categories: categories }, { limit: limit, offset: offset });

                        case 7:
                          questions = _context10.sent;


                          bp.events.emit('toast.qna-save', { text: 'QnA Update Success', type: 'success' });

                          res.send(questions);
                          _context10.next = 17;
                          break;

                        case 12:
                          _context10.prev = 12;
                          _context10.t0 = _context10['catch'](1);

                          logger.error('QnA Error', _context10.t0, _context10.t0.stack);
                          res.status(500).send(_context10.t0.message || 'Error');
                          bp.events.emit('toast.qna-save', { text: 'QnA Update Error: ' + _context10.t0.message, type: 'error' });

                        case 17:
                        case 'end':
                          return _context10.stop();
                      }
                    }
                  }, _callee10, _this2, [[1, 12]]);
                }));

                return function (_x14, _x15) {
                  return _ref15.apply(this, arguments);
                };
              }());

              router.delete('/:question', function () {
                var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(req, res) {
                  var _req$query2, limit, offset, question, categories, questionsData;

                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _req$query2 = req.query, limit = _req$query2.limit, offset = _req$query2.offset, question = _req$query2.question, categories = _req$query2.categories;
                          _context11.prev = 1;

                          bp.events.emit('toast.qna-save', { text: 'QnA Delete In Progress', type: 'info', time: 120000 });
                          _context11.next = 5;
                          return _this2.storage.delete(req.params.question);

                        case 5:
                          _context11.next = 7;
                          return getQuestions({ question: question, categories: categories }, { limit: limit, offset: offset });

                        case 7:
                          questionsData = _context11.sent;


                          bp.events.emit('toast.qna-save', { text: 'QnA Delete Success', type: 'success' });

                          res.send(questionsData);
                          _context11.next = 17;
                          break;

                        case 12:
                          _context11.prev = 12;
                          _context11.t0 = _context11['catch'](1);

                          logger.error('QnA Error', _context11.t0, _context11.t0.stack);
                          res.status(500).send(_context11.t0.message || 'Error');

                          bp.events.emit('toast.qna-save', { text: 'QnA Delete Error: ' + _context11.t0.message, type: 'error' });

                        case 17:
                        case 'end':
                          return _context11.stop();
                      }
                    }
                  }, _callee11, _this2, [[1, 12]]);
                }));

                return function (_x16, _x17) {
                  return _ref16.apply(this, arguments);
                };
              }());

              router.get('/csv', function () {
                var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(req, res) {
                  var categoryWrapper, parseOptions, json2csvParser;
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          res.setHeader('Content-Type', 'text/csv');
                          res.setHeader('Content-disposition', 'attachment; filename=qna_' + (0, _moment2.default)().format('DD-MM-YYYY') + '.csv');
                          categoryWrapper = _this2.isMicrosoftMakerUsed ? ['category'] : [];
                          parseOptions = {
                            fields: ['question', 'action', 'answer', 'answer2'].concat(categoryWrapper),
                            header: true
                          };
                          json2csvParser = new _json2csv.Parser(parseOptions);
                          _context12.t0 = res;
                          _context12.t1 = _iconvLite2.default;
                          _context12.t2 = json2csvParser;
                          _context12.next = 10;
                          return bp.qna.export({ flat: true });

                        case 10:
                          _context12.t3 = _context12.sent;
                          _context12.t4 = _context12.t2.parse.call(_context12.t2, _context12.t3);
                          _context12.t5 = config.exportCsvEncoding;
                          _context12.t6 = _context12.t1.encode.call(_context12.t1, _context12.t4, _context12.t5);

                          _context12.t0.end.call(_context12.t0, _context12.t6);

                        case 15:
                        case 'end':
                          return _context12.stop();
                      }
                    }
                  }, _callee12, _this2);
                }));

                return function (_x18, _x19) {
                  return _ref17.apply(this, arguments);
                };
              }());

              upload = (0, _multer2.default)();

              router.post('/csv', upload.single('csv'), function () {
                var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(req, res) {
                  var csvUploadStatusId, questions, statusCb, _questions;

                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          csvUploadStatusId = (0, _nanoid2.default)();

                          res.end(csvUploadStatusId);
                          recordCsvUploadStatus(csvUploadStatusId, 'Deleting existing questions');

                          if (!(0, _yn2.default)(req.body.isReplace)) {
                            _context13.next = 10;
                            break;
                          }

                          _context13.next = 6;
                          return _this2.storage.all();

                        case 6:
                          questions = _context13.sent;

                          statusCb = function statusCb(processedCount) {
                            return recordCsvUploadStatus(csvUploadStatusId, 'Deleted ' + processedCount + '/' + questions.length + ' questions');
                          };

                          _context13.next = 10;
                          return _this2.storage.delete(questions.map(function (_ref19) {
                            var id = _ref19.id;
                            return id;
                          }), statusCb);

                        case 10:
                          _context13.prev = 10;
                          _questions = _iconvLite2.default.decode(req.file.buffer, config.exportCsvEncoding);
                          _context13.next = 14;
                          return bp.qna.import(_questions, { format: 'csv', csvUploadStatusId: csvUploadStatusId });

                        case 14:
                          recordCsvUploadStatus(csvUploadStatusId, 'Completed');
                          _context13.next = 21;
                          break;

                        case 17:
                          _context13.prev = 17;
                          _context13.t0 = _context13['catch'](10);

                          logger.error('QnA Error:', _context13.t0);
                          recordCsvUploadStatus(csvUploadStatusId, 'Error: ' + _context13.t0.message);

                        case 21:
                        case 'end':
                          return _context13.stop();
                      }
                    }
                  }, _callee13, _this2, [[10, 17]]);
                }));

                return function (_x20, _x21) {
                  return _ref18.apply(this, arguments);
                };
              }());

              router.get('/csv-upload-status/:csvUploadStatusId', function () {
                var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(req, res) {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          res.end(csvUploadStatuses[req.params.csvUploadStatusId]);

                        case 1:
                        case 'end':
                          return _context14.stop();
                      }
                    }
                  }, _callee14, _this2);
                }));

                return function (_x22, _x23) {
                  return _ref20.apply(this, arguments);
                };
              }());

              router.get('/categories', function (req, res) {
                res.send({ categories: categories });
              });

            case 20:
            case 'end':
              return _context15.stop();
          }
        }
      }, _callee15, _this2);
    }))();
  }
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("mkdirp");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("nanoid/generate");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qnaItemData = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _axios = __webpack_require__(9);

var _axios2 = _interopRequireDefault(_axios);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _ms = __webpack_require__(10);

var _ms2 = _interopRequireDefault(_ms);

var _bluebird = __webpack_require__(2);

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Handles QnA Maker API downcasing all key-values in metadata
var markUpperCase = function markUpperCase(str) {
  return str.replace(/([A-Z])/g, 'a-a-a-a-a$1a-a-a-a-a');
};
var restoreUpperCase = function restoreUpperCase(str) {
  return str.replace(/a-a-a-a-a([a-zA-Z])a-a-a-a-a/g, function (_, c) {
    return c.toUpperCase();
  });
};
var keysToRestore = { redirectflow: 'redirectFlow', redirectnode: 'redirectNode' };

var qnaItemData = exports.qnaItemData = function qnaItemData(_ref) {
  var questions = _ref.questions,
      answer = _ref.answer,
      metadata = _ref.metadata;
  return _extends({
    questions: questions,
    answer: answer
  }, _lodash2.default.fromPairs(metadata.map(function (_ref2) {
    var name = _ref2.name,
        value = _ref2.value;
    return [keysToRestore[name] || name, restoreUpperCase(value)];
  })), {
    enabled: (metadata.find(function (_ref3) {
      var name = _ref3.name;
      return name === 'enabled';
    }) || {}).value === 'true'
  });
};

var prepareMeta = function prepareMeta(data) {
  return _lodash2.default.chain(data).pick(['enabled', 'action', 'redirectFlow', 'redirectNode', 'category']).toPairs().map(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
        name = _ref5[0],
        value = _ref5[1];

    return { name: name, value: _lodash2.default.isString(value) ? markUpperCase(value) : value };
  }).filter(function (_ref6) {
    var value = _ref6.value;
    return !_lodash2.default.isUndefined(value) && value !== '';
  }).value();
};

var Storage = function () {
  function Storage(_ref7) {
    var _this = this;

    var bp = _ref7.bp,
        config = _ref7.config;

    _classCallCheck(this, Storage);

    this.publish = function () {
      return _this.client.post('/knowledgebases/' + _this.knowledgebase.id);
    };

    this.patchKb = function (params) {
      return _this.client.patch('/knowledgebases/' + _this.knowledgebase.id, params);
    };

    this.waitForOperationToFinish = function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(operationId, description) {
        var _ref9, data, timeout;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _bluebird2.default.delay(200);

              case 2:
                if (false) {
                  _context.next = 16;
                  break;
                }

                _context.next = 5;
                return _this.client.get('/operations/' + operationId);

              case 5:
                _ref9 = _context.sent;
                data = _ref9.data;
                timeout = _ref9.headers['retry-after'];

                _this.bp.logger.info('[QNA] QnA Maker ' + description + ' #' + operationId + ' ' + data.operationState);
                if (data.operationState === 'Failed') {
                  _this.bp.logger.error(data.errorResponse.error);
                }

                if (['Running', 'NotStarted'].includes(data.operationState)) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt('return');

              case 12:
                _context.next = 14;
                return _bluebird2.default.delay((0, _ms2.default)('3s'));

              case 14:
                _context.next = 2;
                break;

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      return function (_x, _x2) {
        return _ref8.apply(this, arguments);
      };
    }();

    this.invalidateCache = function () {
      return _this.questions = null;
    };

    var baseURL = 'https://westus.api.cognitive.microsoft.com/qnamaker/v4.0';
    var headers = { 'Ocp-Apim-Subscription-Key': config.qnaMakerApiKey };
    Object.assign(this, {
      bp: bp,
      client: _axios2.default.create({ baseURL: baseURL, headers: headers }),
      knowledgebaseName: config.qnaMakerKnowledgebase
    });
  }

  _createClass(Storage, [{
    key: 'initialize',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this2 = this;

        var isBpKnowledgbase, _ref12, initialKnowledgebases, existingKb, _ref13, operationId, _ref14, knowledgebases;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                isBpKnowledgbase = function isBpKnowledgbase(_ref11) {
                  var name = _ref11.name;
                  return name === _this2.knowledgebaseName;
                };

                _context2.next = 3;
                return this.client.get('/knowledgebases/');

              case 3:
                _ref12 = _context2.sent;
                initialKnowledgebases = _ref12.data.knowledgebases;
                existingKb = initialKnowledgebases.find(isBpKnowledgbase);

                if (!existingKb) {
                  _context2.next = 10;
                  break;
                }

                this.knowledgebase = existingKb;
                _context2.next = 21;
                break;

              case 10:
                _context2.next = 12;
                return this.client.post('/knowledgebases/create', {
                  name: this.knowledgebaseName
                });

              case 12:
                _ref13 = _context2.sent;
                operationId = _ref13.data.operationId;
                _context2.next = 16;
                return this.waitForOperationToFinish(operationId, 'creating KB');

              case 16:
                _context2.next = 18;
                return this.client.get('/knowledgebases/');

              case 18:
                _ref14 = _context2.sent;
                knowledgebases = _ref14.data.knowledgebases;

                this.knowledgebase = knowledgebases.find(isBpKnowledgbase);

              case 21:
                _context2.next = 23;
                return this.client.get('/endpointkeys');

              case 23:
                this.endpointKey = _context2.sent.data.primaryEndpointKey;

              case 24:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function initialize() {
        return _ref10.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: 'update',
    value: function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(data, id) {
        var prevData, questionsChanged, questionsToAdd, questionsToDelete, _ref16, operationId;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.getQuestion(id);

              case 2:
                prevData = _context3.sent;
                questionsChanged = _lodash2.default.isEqual(data.questions, prevData.questions);
                questionsToAdd = _lodash2.default.difference(data.questions, prevData.questions);
                questionsToDelete = _lodash2.default.difference(prevData.questions, data.questions);
                _context3.next = 8;
                return this.patchKb({
                  update: {
                    qnaList: [_extends({
                      id: id,
                      answer: data.answer
                    }, questionsChanged ? {} : { questions: { add: questionsToAdd, delete: questionsToDelete } }, {
                      metadata: { delete: prevData.metadata, add: prepareMeta(data) }
                    })]
                  }
                });

              case 8:
                _ref16 = _context3.sent;
                operationId = _ref16.data.operationId;
                _context3.next = 12;
                return this.waitForOperationToFinish(operationId);

              case 12:

                this.invalidateCache();
                _context3.next = 15;
                return this.publish();

              case 15:
                return _context3.abrupt('return', id);

              case 16:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x3, _x4) {
        return _ref15.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: 'insert',
    value: function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(qna) {
        var qnas, _ref18, operationId;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                qnas = _lodash2.default.isArray(qna) ? qna : [qna];
                _context4.next = 3;
                return this.patchKb({
                  add: {
                    qnaList: qnas.map(function (qna) {
                      return {
                        answer: qna.answer,
                        questions: qna.questions.reverse(), // To be able to prepend questions
                        metadata: prepareMeta(qna)
                      };
                    })
                  }
                });

              case 3:
                _ref18 = _context4.sent;
                operationId = _ref18.data.operationId;
                _context4.next = 7;
                return this.waitForOperationToFinish(operationId, 'inserting qnaItems');

              case 7:
                this.invalidateCache();
                _context4.next = 10;
                return this.publish();

              case 10:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function insert(_x5) {
        return _ref17.apply(this, arguments);
      }

      return insert;
    }()
  }, {
    key: 'fetchQuestions',
    value: function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var _ref20, qnaDocuments;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this.questions) {
                  _context5.next = 6;
                  break;
                }

                _context5.next = 3;
                return this.client.get('/knowledgebases/' + this.knowledgebase.id + '/test/qna/');

              case 3:
                _ref20 = _context5.sent;
                qnaDocuments = _ref20.data.qnaDocuments;


                // Showing latest items first
                this.questions = qnaDocuments.reverse().map(function (doc) {
                  return _extends({}, doc, { questions: doc.questions.reverse() });
                });

              case 6:
                return _context5.abrupt('return', this.questions);

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function fetchQuestions() {
        return _ref19.apply(this, arguments);
      }

      return fetchQuestions;
    }()
  }, {
    key: 'getQuestion',
    value: function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        var question;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.fetchQuestions();

              case 2:
                _context6.t0 = function (_ref22) {
                  var qnaId = _ref22.id;
                  return qnaId == id;
                };

                question = _context6.sent.find(_context6.t0);

                if (question) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt('return');

              case 6:
                return _context6.abrupt('return', { id: question.id, data: qnaItemData(question) });

              case 7:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getQuestion(_x6) {
        return _ref21.apply(this, arguments);
      }

      return getQuestion;
    }()
  }, {
    key: 'count',
    value: function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var questions;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.fetchQuestions();

              case 2:
                questions = _context7.sent;
                return _context7.abrupt('return', questions.length);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function count() {
        return _ref23.apply(this, arguments);
      }

      return count;
    }()
  }, {
    key: 'all',
    value: function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            limit = _ref25.limit,
            offset = _ref25.offset;

        var questions;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.fetchQuestions();

              case 2:
                questions = _context8.sent;

                if (typeof limit !== 'undefined' && typeof offset !== 'undefined') {
                  questions = questions.slice(offset, offset + limit);
                }

                return _context8.abrupt('return', questions.map(function (qna) {
                  return { id: qna.id, data: qnaItemData(qna) };
                }));

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function all() {
        return _ref24.apply(this, arguments);
      }

      return all;
    }()
  }, {
    key: 'answersOn',
    value: function () {
      var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(question) {
        var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var metadataFilters, resp, answers;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                metadataFilters = category ? [{ name: 'category', value: category }] : [];
                _context9.next = 3;
                return _axios2.default.post('/qnamaker/knowledgebases/' + this.knowledgebase.id + '/generateAnswer', { question: question, top: 10, strictFilters: [{ name: 'enabled', value: true }].concat(metadataFilters) }, { baseURL: this.knowledgebase.hostName, headers: { Authorization: 'EndpointKey ' + this.endpointKey } });

              case 3:
                resp = _context9.sent;
                answers = resp.data.answers;
                return _context9.abrupt('return', _lodash2.default.orderBy(answers, ['score'], ['desc']).map(function (answer) {
                  return _extends({}, _lodash2.default.pick(answer, ['questions', 'answer', 'id', 'metadata', 'enabled']), {
                    confidence: answer.score / 100
                  }, qnaItemData(answer));
                }));

              case 6:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function answersOn(_x8) {
        return _ref26.apply(this, arguments);
      }

      return answersOn;
    }()
  }, {
    key: 'delete',
    value: function () {
      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(id, statusCb) {
        var _this3 = this;

        var ids, maxQuestionsToDeletePerRequest;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                ids = _lodash2.default.isArray(id) ? id : [id];

                if (!(ids.length === 0)) {
                  _context11.next = 3;
                  break;
                }

                return _context11.abrupt('return');

              case 3:
                maxQuestionsToDeletePerRequest = 300;
                _context11.next = 6;
                return _bluebird2.default.each(_lodash2.default.chunk(ids, maxQuestionsToDeletePerRequest), function () {
                  var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(idsChunk, i) {
                    var _ref29, operationId;

                    return regeneratorRuntime.wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            _context10.next = 2;
                            return _this3.client.patch('/knowledgebases/' + _this3.knowledgebase.id, {
                              delete: { ids: idsChunk }
                            });

                          case 2:
                            _ref29 = _context10.sent;
                            operationId = _ref29.data.operationId;
                            _context10.next = 6;
                            return _this3.waitForOperationToFinish(operationId, 'deleting qnaItems');

                          case 6:
                            statusCb && statusCb(Math.min((i + 1) * maxQuestionsToDeletePerRequest, ids.length));

                          case 7:
                          case 'end':
                            return _context10.stop();
                        }
                      }
                    }, _callee10, _this3);
                  }));

                  return function (_x12, _x13) {
                    return _ref28.apply(this, arguments);
                  };
                }());

              case 6:
                this.invalidateCache();
                _context11.next = 9;
                return this.publish();

              case 9:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _delete(_x10, _x11) {
        return _ref27.apply(this, arguments);
      }

      return _delete;
    }()
  }]);

  return Storage;
}();

exports.default = Storage;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("ms");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processEvent = undefined;

var _nlu = __webpack_require__(1);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var processEvent = exports.processEvent = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event, _ref2) {
    var bp = _ref2.bp,
        storage = _ref2.storage,
        logger = _ref2.logger,
        config = _ref2.config;
    var answer, id, stateId;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            answer = void 0;

            if (!config.qnaMakerApiKey) {
              _context.next = 10;
              break;
            }

            _context.next = 4;
            return bp.qna.answersOn(event.text);

          case 4:
            answer = _context.sent.pop();

            if (answer) {
              _context.next = 7;
              break;
            }

            return _context.abrupt('return', false);

          case 7:
            logger.debug('QnA: matched QnA-maker question', answer.id);
            _context.next = 17;
            break;

          case 10:
            if (!(!(event.nlu || {}).intent || !event.nlu.intent.startsWith(_nlu.NLU_PREFIX))) {
              _context.next = 12;
              break;
            }

            return _context.abrupt('return', false);

          case 12:

            logger.debug('QnA: matched NLU intent', event.nlu.intent.name);
            id = event.nlu.intent.name.substring(_nlu.NLU_PREFIX.length);
            _context.next = 16;
            return storage.getQuestion(id);

          case 16:
            answer = _context.sent.data;

          case 17:
            if (answer.enabled) {
              _context.next = 20;
              break;
            }

            logger.debug('QnA: question disabled, skipping');
            return _context.abrupt('return', false);

          case 20:
            if (!answer.action.includes('text')) {
              _context.next = 25;
              break;
            }

            logger.debug('QnA: replying to recognized question with plain text answer', answer.id);
            event.reply(config.textRenderer, { text: answer.answer });
            // return `true` to prevent further middlewares from capturing the message

            if (!(answer.action === 'text')) {
              _context.next = 25;
              break;
            }

            return _context.abrupt('return', true);

          case 25:
            if (!answer.action.includes('redirect')) {
              _context.next = 32;
              break;
            }

            logger.debug('QnA: replying to recognized question with redirect', answer.id);
            // TODO: This is used as the `stateId` by the bot template
            // Not sure if it's universal enough for every use-case but
            // I don't see a better alternative as of now
            stateId = event.sessionId || event.user.id;

            logger.debug('QnA: jumping', stateId, answer.redirectFlow, answer.redirectNode);
            _context.next = 31;
            return bp.dialogEngine.jumpTo(stateId, answer.redirectFlow, answer.redirectNode);

          case 31:
            return _context.abrupt('return', false);

          case 32:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function processEvent(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvParse = exports.jsonParse = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = __webpack_require__(13);

var _get2 = _interopRequireDefault(_get);

var _sync = __webpack_require__(14);

var _sync2 = _interopRequireDefault(_sync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parseFlow = function parseFlow(str) {
  var _str$split = str.split('#'),
      _str$split2 = _slicedToArray(_str$split, 2),
      redirectFlow = _str$split2[0],
      _str$split2$ = _str$split2[1],
      redirectNode = _str$split2$ === undefined ? '' : _str$split2$;

  return { redirectFlow: redirectFlow, redirectNode: redirectNode };
};

var jsonParse = exports.jsonParse = function jsonParse(jsonContent, options) {
  return jsonContent.map(function (_ref, i) {
    var questions = _ref.questions,
        instruction = _ref.answer,
        answer2 = _ref.answer2,
        action = _ref.action,
        category = _ref.category;

    if (!['text', 'redirect', 'text_redirect'].includes(action)) {
      throw new Error('Failed to process CSV-row ' + (i + 1) + ': action should be either "text", "redirect" or "text_redirect"');
    }

    var redirectInstruction = null;
    var textAnswer = '';
    var hasCategory = options.hasCategory;


    if (action === 'text') {
      textAnswer = instruction;
    } else if (action === 'redirect') {
      redirectInstruction = instruction;
    } else if (action === 'text_redirect') {
      textAnswer = instruction;
      redirectInstruction = answer2;
    }

    var flowParams = redirectInstruction ? parseFlow(redirectInstruction) : { redirectFlow: '', redirectNode: '' };
    var categoryWrapper = hasCategory ? { category: category } : {};

    return _extends({ questions: questions, action: action, answer: textAnswer }, flowParams, categoryWrapper);
  });
};

var csvParse = exports.csvParse = function csvParse(csvContent, options) {
  var hasCategory = options.hasCategory;


  var mergeRows = function mergeRows(acc, _ref2) {
    var question = _ref2.question,
        answer = _ref2.answer,
        answer2 = _ref2.answer2,
        category = _ref2.category,
        action = _ref2.action;

    var _acc$slice = acc.slice(-1),
        _acc$slice2 = _slicedToArray(_acc$slice, 1),
        prevRow = _acc$slice2[0];

    var isSameAnswer = prevRow && prevRow.answer === answer && (!answer2 || answer2 === prevRow.answer2);

    if (isSameAnswer) {
      return [].concat(_toConsumableArray(acc.slice(0, acc.length - 1)), [_extends({}, prevRow, { questions: [].concat(_toConsumableArray(prevRow.questions), [question]) })]);
    }
    var categoryWrapper = hasCategory ? { category: category } : {};

    return [].concat(_toConsumableArray(acc), [_extends({ answer: answer, answer2: answer2, action: action }, categoryWrapper, { questions: [question] })]);
  };
  var categoryWrapper = hasCategory ? ['category'] : [];

  var rows = (0, _sync2.default)(csvContent, {
    columns: ['question', 'action', 'answer', 'answer2'].concat(categoryWrapper)
  }).reduce(mergeRows, []);

  // We trim the header if detected in the first row
  if ((0, _get2.default)(rows, '0.action') === 'action') {
    rows.splice(0, 1);
  }

  return jsonParse(rows, options);
};

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("csv-parse/lib/sync");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("multer");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("json2csv");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("yn");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("moment");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("iconv-lite");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("nanoid");

/***/ })
/******/ ]);
//# sourceMappingURL=node.bundle.js.map